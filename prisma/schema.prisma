// Prisma schema for Choosie
// DB: use Postgres in production (Vercel Postgres), SQLite allowed for local dev.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Using Postgres for local development and production
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js / NextAuth core models -------------------------------------------
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Billing quick flags
  isPro         Boolean   @default(false)

  accounts      Account[]
  sessions      Session[]
  lists         List[]
  subscriptions Subscription[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App domain models ---------------------------------------------------------

enum ModuleType {
  MOVIES
  BOOKS
  RECIPES
  ANYTHING
}

model List {
  id          String      @id @default(cuid())
  userId      String
  title       String
  module      ModuleType  @default(MOVIES)
  description String?
  // simple taste signals placeholder; can expand later
  tasteJson   Json?
  items       Item[]
  progress    Progress?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Item {
  id        String     @id @default(cuid())
  listId    String
  // Common fields across modules
  title     String
  imageUrl  String?
  // Module-specific identifiers (nullable)
  tmdbId    String?
  volumeId  String?
  recipeId  String?
  notes     String?
  rank      Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  list List @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([listId])
}

model Progress {
  id           String   @id @default(cuid())
  listId       String   @unique
  // Snapshots of narrowing rounds, compacted JSON to keep flexibility
  historyJson  Json
  winnerItemId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  list List @relation(fields: [listId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                String    @id @default(cuid())
  userId            String
  stripeCustomerId  String?   @unique
  stripeSubscriptionId String? @unique
  status            String?   // trialing, active, past_due, canceled, unpaid
  plan              String?
  currentPeriodEnd  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
